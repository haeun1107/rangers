name: RANGERS CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Make application-database.yaml
        run: |
          cd ./src/main/resources
          touch ./application-database.yaml
          echo "${{ secrets.DATABASE }}" >> ./application-database.yaml
        shell: bash

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Docker login
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push web image
        run: |
          docker build -t ${{ secrets.DOCKER_REPO }}/rangers:latest .
          docker push ${{ secrets.DOCKER_REPO }}/rangers:latest

      - name: Copy docker-compose file to EC2
        run: scp -o StrictHostKeyChecking=no -i ${{ secrets.KEY }} docker-compose.yaml ubuntu@${{ secrets.HOST }}:/home/ubuntu/docker-compose.yaml

      - name: Determine active environment and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            # Determine which environment is currently active
            ACTIVE_ENV=$(curl -s http://localhost/active | grep -oP '(?<=Active environment: ).*')
            echo "Currently active environment: $ACTIVE_ENV"

            # Decide which environment to deploy to
            if [ "$ACTIVE_ENV" == "Green" ]; then
              TARGET_ENV="Blue"
              TARGET_CONTAINER="web_blue"
              TARGET_PORT="8081"
            else
              TARGET_ENV="Green"
              TARGET_CONTAINER="web_green"
              TARGET_PORT="8082"
            fi

            echo "Deploying to $TARGET_ENV environment..."

            # Pull the latest image for the target environment and bring it up
            sudo docker-compose pull $TARGET_CONTAINER
            sudo docker-compose up -d $TARGET_CONTAINER

            # Update nginx configuration
            if [ "$TARGET_ENV" == "Green" ]; then
              sudo sed -i 's/web_blue:8080/web_green:8080/' /etc/nginx/conf.d/nginx.conf
            else
              sudo sed -i 's/web_green:8080/web_blue:8080/' /etc/nginx/conf.d/nginx.conf
            fi

            # Reload nginx to apply the new configuration
            sudo docker exec nginx nginx -s reload

      - name: Health Check for Green deployment
        run: |
          sleep 10  # Give it some time to start
          DEPLOYMENT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$TARGET_PORT/health)
          if [ "$DEPLOYMENT_STATUS" != "200" ]; then
            echo "Deployment failed, rolling back to previous environment"
            ssh -i ${{ secrets.KEY }} ubuntu@${{ secrets.HOST }} << EOF
              sudo docker-compose down $TARGET_CONTAINER
              sudo docker exec nginx nginx -s reload
            EOF
            exit 1
          else
            echo "Deployment successful"
          fi

      - name: Cleanup unused Docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker image prune -f
