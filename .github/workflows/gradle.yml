# Workflow의 이름을 지정합니다.
name: BackEnd - CI/CD

on:
  push:
    # main branch에 push(merge)될 경우 실행됩니다.
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    # build를 진행할 운영체제를 선택합니다.
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Gradle을 캐싱해둡니다 -> 빌드 속도가 증가하는 효과가 있습니다.
      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar


      # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.
      - name: zip file 생성
        run: |
          mkdir deploy
          cp ./docker-compose.blue.yml ./deploy/
          cp ./docker-compose.green.yml ./deploy/
          cp ./appspec.yml ./deploy/
          cp ./Dockerfile ./deploy/
          cp ./*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy
      

      # AWS에 연결해줍니다.
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

      # S3에 프로젝트를 업로드 합니다.
      - name: S3에 프로젝트 업로드
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          ./spring-build.zip s3://cocofarm-bucket

      # CodeDelploy에 배포를 요청합니다.
      - name: Code Deploy 배포 요청
        run: aws deploy create-deployment --application-name cocofarm-app
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name cocofarm-app
          --s3-location bucket=cocofarm-bucket,bundleType=zip,key=spring-build.zip

      # 빌드 성공 & 실패 여부를 Slack 알람으로 발송합니다.
#      - name: Slack 알람 발송
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_CHANNEL: general
#          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#          SLACK_ICON: https://github.com/rtCamp.png?size=48
#          SLACK_MESSAGE: 배포 결과 => ${{ job.status }}
#          SLACK_TITLE: 배포 결과 알람
#          SLACK_USERNAME: Notification-Bot
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        # 이 구문을 추가해야 빌드 성공 실패와 상관없이 동작합니다.
        if: always()